"""    def writeConfig(self):
        text = """<?xml version="1.0" encoding="iso-8859-1"?>
<config name="configuration file for yield plugin">
"""
        relations = self.iface.legendInterface().groupLayerRelationship()
        allGroupListed = []
        for rel in relations:
            allGroupListed.append(rel[0])
        
        mainList = []
        for gr in allGroupListed:
            main = None
            for rel in relations:
                if gr in rel[1]:
                    main = rel[0]
            levelList.append(main)
        index = 0    
        for group in allGroupListed:
            relation = relations[index]
            index += 1
            groupe1Name = relation[0].encode('latin1').decode('utf-8', 'ignore')
            
            if groupe1Name == '':
                return
            
            text = text + """
  <groupe1 groupename="%s">"""%str(groupe1Name)
            for item in relation[1]:
                if item in allGroupListed:
                    
            if isinstance(relation[1], list):
                group2Name = relation[1][0].encode('latin1').decode('utf-8', 'ignore')
                text = text + """
    <groupe2 groupename="%s">"""%str(group2Name)
                for tableName in relation[1][1]:
                    tableName = tableName.encode('latin1').decode('utf-8', 'ignore')
                    text = text + """
      <layer>%s</layer>"""%str(tableName)
                text = text + """
    </group2>""" 
            else:
                for tableName in relation[1]:
                    tableName = tableName.encode('latin1').decode('utf-8', 'ignore')
                    text = text + """
    <layer>%s</layer>"""%str(tableName)
            text = text + """
  </group1>"""
        text = text + """
</config>"""
        path = os.path.dirname(os.path.realpath(__file__))
        #Get the name of the saved KML file
        fName = QtGui.QFileDialog.getSaveFileName(self,"save file dialog" ,path,"xml (*.xml)");
        if fName:
            f = open(fName, 'w')
            f.write(text)
            f.close()
        
        
        
    def applyConfig(self):
        # Read a KML file created by th plugin or a KML for a picture pose in google Earth$
        directory  = os.path.dirname(os.path.realpath(__file__))
        fileName = directory + "/config.xml"
        file = QtCore.QFile(fileName)
        groupList = []
        layerList = []
        if (not file.open(QtCore.QIODevice.ReadOnly | QtCore.QIODevice.Text)):
            QtGui.QMessageBox.warning(self, 'Application', 'Cannot read file %s:\n%s.' %(fileName,file.errorString()))
            return False
        else:
            doc = QtXml.QDomDocument("EnvironmentML");
            if(not doc.setContent(file)):
                file.close()
                QtGui.QMessageBox.warning(self,"Error","Could not parse xml file.")
            file.close()
            root = doc.documentElement();
            if(root.tagName()!="config"):
                 QtGui.QMessageBox.warning(self,"Error","Could not parse xml file. Root Element must be <config/>.")
            else:
                groups = root.childNodes()
                n_groups =  groups.length()
                i = 0
                while i < n_groups: 
                    group = groups.at(i)
                    groupeName =  group.toElement().attribute('groupename')
                    layers = group.childNodes()
                    n_layers = layers.length()
                    j = 0
                    groupList.append(groupeName)
                    list = []
                    while j < n_layers:
                        layer = layers.at(j).firstChild().toText().data()
                        list.append(layer)
                        j +=1
                    layerList.append(list)
                    i +=1

        for group in self.iface.legendInterface().groups():
            try:
                self.iface.legendInterface().removeGroup(0)
            except:
                print 'error'
        
        index = 0
        for group in groupList:
            self.iface.legendInterface().addGroup(group)
            for name, layer in QgsMapLayerRegistry.instance().mapLayers().iteritems():
                if layer.name() in layerList[index]:
                    self.iface.legendInterface().moveLayer(layer,index)
            index += 1"""
